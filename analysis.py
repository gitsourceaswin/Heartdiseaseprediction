# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VrNxBHC-4QtB4EFviEggfkWBteaUgVT-
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("heart.csv")

print(df.head())

print(df.info()) #to know the null values





print(df.describe()) # Summary statistics for numerical features

print(df.groupby("target")["age"].describe())  # Compare age by heart disease presence



print(df.groupby("target")["chol"].median())  # Median cholesterol by heart disease presence

print(df["age"].std())

# Distribution visualization
df.hist(figsize=(10, 10))  # Histograms for all numerical features
plt.subplots_adjust(bottom=0.1)  # Adjust layout for better visibility

# Frequency visualization
sns.countplot(x="sex", data=df)  # Count plot for categorical feature (sex)
plt.show()

sns.countplot(x="sex", hue="target", data=df[df['sex'] == 0])
plt.title('Count plot for sex=0 based on target variable')
plt.show()

sns.countplot(x="cp", hue="target", data=df)
plt.title('Plot Based on CP')
plt.show()

sns.countplot(x="fbs", hue="target", data=df)
plt.title('Plot Based on FBS')
plt.show()

sns.countplot(x="restecg", hue="target", data=df)
plt.title('Plot Based on RestECG')
plt.show()

# Box plot to visualize outliers for "restecg" feature
sns.boxplot(x="restecg", data=df)
plt.title('Boxplot for RestECG')
plt.show()

sns.boxplot(x="age", data=df)
plt.title('Boxplot for AGE')
plt.show()

sns.boxplot(x="trestbps", data=df)
plt.title('Boxplot for TRESTBPS')
plt.show()

sns.boxplot(x="chol", data=df)
plt.title('Boxplot for cholestrol')
plt.show()

sns.boxplot(x="thalach", data=df)
plt.title('Boxplot for thalach')
plt.show()

sns.boxplot(x="oldpeak", data=df)
plt.title('Boxplot for Old Peak')
plt.show()

sns.boxplot(x="ca", data=df)
plt.title('Boxplot for Calcium')
plt.show()

# Count plot for sex=1 based on the target variable
sns.countplot(x="sex", hue="target", data=df[df['sex'] == 1])
plt.title('Count plot for sex=1 based on target variable')
plt.show()

sns.countplot(x="target", data=df)  # Count plot for categorical feature (sex)
plt.show()

sns.scatterplot(x="age", y="target", data=df)  # Scatter plot for age vs. target
plt.show()

# Correlation matrix (if many features)
corr = df.corr()
sns.heatmap(corr, annot=True)  # Heatmap for correlations
plt.show()

corr

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

X = df.drop("target", axis=1)
y = df["target"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

predictions = model.predict(X_test)
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print(accuracy_score(y_test, predictions))
print(classification_report(y_test, predictions))
print(confusion_matrix(y_test, predictions))